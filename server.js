const express = require('express');
const path = require('path');
const { Pool } = require('pg');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const crypto = require('crypto');
const Binance = require('binance-api-node').default;
const { RSI } = require('technicalindicators'); // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º RSI

const app = express();
const PORT = 3000;
const JWT_SECRET = 'your-super-secret-key';
const ENCRYPTION_KEY = '12345678901234567890123456789012';

// ... —Ñ—É–Ω–∫—Ü–∏–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è, middleware, –º–∞—Ä—à—Ä—É—Ç—ã API ...

// ---------------------------------------------------
// ### –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –¢–û–†–ì–û–í–û–ì–û –ë–û–¢–ê (V2) ###
// ---------------------------------------------------

async function runTradingLogic() {
    console.log(`\nü§ñ [${new Date().toLocaleTimeString()}] Uruchamiam weryfikacjƒô handlowƒÖ wed≈Çug RSI...`);

    const { rows: users } = await pool.query('SELECT * FROM users WHERE api_key_encrypted IS NOT NULL');
    if (users.length === 0) return;

    for (const user of users) {
        try {
            const apiKey = decrypt(JSON.parse(user.api_key_encrypted));
            const apiSecret = decrypt(JSON.parse(user.api_secret_encrypted));
            const userBinanceClient = Binance({ apiKey, apiSecret });

            // 1. –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ (100 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —á–∞—Å–æ–≤—ã—Ö —Å–≤–µ—á–µ–π) –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ RSI
            const candles = await userBinanceClient.candles({
                symbol: 'BTCUSDT',
                interval: '1h', // –ß–∞—Å–æ–≤–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
                limit: 100      // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π
            });

            // 2. –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –∏ —Å—á–∏—Ç–∞–µ–º RSI
            const closingPrices = candles.map(candle => parseFloat(candle.close));
            const rsiResult = RSI.calculate({
                values: closingPrices,
                period: 14 // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è RSI
            });
            const currentRSI = rsiResult[rsiResult.length - 1]; // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ RSI

            console.log(`- Sprawdzanie dla ${user.email}. Aktualny RSI(14) na 1h: ${currentRSI.toFixed(2)}`);

            // 3. –ù–û–í–ê–Ø –¢–û–†–ì–û–í–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø –ù–ê –û–°–ù–û–í–ï RSI
            if (currentRSI < 30) {
                console.log(`üî• [${user.email}] RSI poni≈ºej 30! Sygna≈Ç KUPNA! Sk≈Çadam zlecenie...`);
                const order = await userBinanceClient.order({
                    symbol: 'BTCUSDT', side: 'BUY', type: 'MARKET', quoteOrderQty: '15',
                });
                console.log(`‚úÖ Zlecenie SPRZEDA≈ªY dla ${user.email} Z≈Ço≈ºono pomy≈õlnie!`, order);

            } else if (currentRSI > 70) {
                console.log(`üìâ [${user.email}] RSI powy≈ºej 70! Sygna≈Ç SPRZEDA≈ªY! Sk≈Çadam zlecenie...`);
                const order = await userBinanceClient.order({
                    symbol: 'BTCUSDT', side: 'SELL', type: 'MARKET', quantity: '0.0002', // –ü—Ä–æ–¥–∞–µ–º –Ω–µ–±–æ–ª—å—à–æ–µ –∫–æ–ª-–≤–æ BTC –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
                });
                console.log(`‚úÖ Zlecenie SPRZEDA≈ªY dla ${user.email} Z≈Ço≈ºono pomy≈õlnie!`, order);
            
            } else {
                console.log(`- [${user.email}] Neutralna strefa RSI. Nic nie robimy.`);
            }

        } catch (error) {
            console.error(`‚ùå B≈ÇƒÖd przy przetwarzaniu u≈ºytkownika. ${user.email}:`, error.body || error);
        }
    }
}

function startBot() {
    console.log('üöÄ Bot v2 (RSI) uruchomiony! Logika bƒôdzie wykonywana co minutƒô...');
    runTradingLogic();
    setInterval(runTradingLogic, 60000);
}

// ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ —Å–µ—Ä–≤–µ—Ä–∞ ...
const pool = new Pool({
    connectionString: process.env.DATABASE_URL,
    ssl: {
        rejectUnauthorized: false
    }
});
app.use(express.json()); app.use(express.static(path.join(__dirname, 'public')));
function encrypt(text) { const iv = crypto.randomBytes(16); const cipher = crypto.createCipheriv('aes-256-cbc', Buffer.from(ENCRYPTION_KEY, 'utf-8'), iv); let e = cipher.update(text); e = Buffer.concat([e, cipher.final()]); return { iv: iv.toString('hex'), encryptedData: e.toString('hex') }; }
function decrypt(text) { const iv = Buffer.from(text.iv, 'hex'); const e = Buffer.from(text.encryptedData, 'hex'); const d = crypto.createDecipheriv('aes-256-cbc', Buffer.from(ENCRYPTION_KEY, 'utf-8'), iv); let dr = d.update(e); dr = Buffer.concat([dr, d.final()]); return dr.toString(); }
function authenticateToken(req, res, next) { const authHeader = req.headers['authorization']; const token = authHeader && authHeader.split(' ')[1]; if (token == null) return res.sendStatus(401); jwt.verify(token, JWT_SECRET, (err, user) => { if (err) return res.sendStatus(403); req.user = user; next(); }); }
app.post('/api/register', async (req, res) => { try { const { email, password } = req.body; const existingUser = await pool.query('SELECT * FROM users WHERE email = $1', [email]); if (existingUser.rows.length > 0) return res.status(409).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' }); const passwordHash = await bcrypt.hash(password, 10); const newUser = await pool.query('INSERT INTO users (email, password_hash) VALUES ($1, $2) RETURNING id, email', [email, passwordHash]); console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', newUser.rows[0]); res.status(201).json({ message: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${newUser.rows[0].email} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!` }); } catch (error) { console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error); res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }); } });
app.post('/api/login', async (req, res) => { try { const { email, password } = req.body; const userResult = await pool.query('SELECT * FROM users WHERE email = $1', [email]); if (userResult.rows.length === 0) return res.status(401).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' }); const user = userResult.rows[0]; const isPasswordCorrect = await bcrypt.compare(password, user.password_hash); if (!isPasswordCorrect) return res.status(401).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' }); const token = jwt.sign({ userId: user.id, email: user.email }, JWT_SECRET, { expiresIn: '1h' }); console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.email} —É—Å–ø–µ—à–Ω–æ –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É.`); res.json({ message: '–í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω!', token: token }); } catch (error) { console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error); res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }); } });
app.post('/api/keys', authenticateToken, async (req, res) => { try { const { apiKey, apiSecret } = req.body; const userId = req.user.userId; const encryptedKey = encrypt(apiKey); const encryptedSecret = encrypt(apiSecret); await pool.query('UPDATE users SET api_key_encrypted = $1, api_secret_encrypted = $2 WHERE id = $3', [JSON.stringify(encryptedKey), JSON.stringify(encryptedSecret), userId]); console.log(`‚úÖ API-–∫–ª—é—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${req.user.email} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.`); res.json({ message: 'API-–∫–ª—é—á–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã' }); } catch (error) { console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª—é—á–µ–π:', error); res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }); } });
app.get('/api/balance', authenticateToken, async (req, res) => { try { const userId = req.user.userId; const result = await pool.query('SELECT api_key_encrypted, api_secret_encrypted FROM users WHERE id = $1', [userId]); const keys = result.rows[0]; if (!keys.api_key_encrypted || !keys.api_secret_encrypted) return res.status(400).json({ message: 'API-–∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.' }); const apiKey = decrypt(JSON.parse(keys.api_key_encrypted)); const apiSecret = decrypt(JSON.parse(keys.api_secret_encrypted)); const client = Binance({ apiKey, apiSecret }); const accountInfo = await client.accountInfo(); const balances = accountInfo.balances.filter(b => parseFloat(b.free) > 0 || parseFloat(b.locked) > 0); console.log(`‚úÖ –ë–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${req.user.email} —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω.`); res.json(balances); } catch (error) { console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error.body || error); res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API-–∫–ª—é—á–∏.' }); } });
app.get('/api/profile', authenticateToken, (req, res) => { console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${req.user.email} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.`); res.json({ message: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å!', userData: req.user }); });

app.listen(PORT, () => {
    console.log(`Serwer dzia≈Ça na http://localhost:${PORT}`);
    startBot();
});
